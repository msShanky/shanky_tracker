// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  name           String?
  email          String    @unique
  hashedPassword String?   @map("hashed_password")
  role           String    @default("USER")
  tokens         Token[]
  sessions       Session[]

  @@map("user")
}

model Session {
  id                 Int       @id @default(autoincrement())
  expiresAt          DateTime? @map("expired_at")
  handle             String    @unique
  hashedSessionToken String?   @map("hashed_session_token")
  antiCSRFToken      String?   @map("anti_csrf_token")
  publicData         String?   @map("public_data")
  privateData        String?   @map("private_data")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  userId             Int?      @map("user_id")
  user               User?     @relation(fields: [userId], references: [id])

  @@map("session")
}

model Token {
  id          Int       @id @default(autoincrement())
  hashedToken String
  // type        String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime  @map("expired_at")
  sentTo      String    @map("sent_to")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
  @@map("token")
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
enum TokenType {
  RESET_PASSWORD
}

model TransactionMode {
  id              Int               @id @default(autoincrement())
  name            String
  category        String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  bankTransaction BankTransaction[]
  tagMapping      TagMapping[]

  @@map("transaction_mode")
}

model TransactionPurpose {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  bankTransaction BankTransaction[]
  tagMapping      TagMapping[]

  @@map("transaction_purpose")
}

model TagMapping {
  id                   Int                 @id @default(autoincrement())
  tagName              String              @map("tag_name")
  transactionModeId    Int?                @map("transaction_mode_id")
  transactionMode      TransactionMode?    @relation(fields: [transactionModeId], references: [id])
  transactionPurposeId Int?                @map("transaction_purpose_id")
  transactionPurpose   TransactionPurpose? @relation(fields: [transactionPurposeId], references: [id])
  bankTransactionId    Int?
  bankTransaction      BankTransaction?    @relation(fields: [bankTransactionId], references: [id])
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @default(now()) @updatedAt @map("updated_at")
}

// Mode of transaction would be seperate (card and upi or bank payment)
// mode of transaction and reason/purpose of the transaction should be unique
// define a category of grouping the transaction
model BankTransaction {
  id                   Int                @id @default(autoincrement())
  transactionDate      String             @map("transaction_date")
  creditAmount         Decimal            @map("credit_amount")
  description          String
  debitAmount          Decimal            @map("debit_amount")
  refNumber            String             @map("ref_number")
  closingBalance       Decimal            @map("closing_balance")
  bankName             String             @map("bank_name")
  tags                 TagMapping[]
  // mode of the transaction (upi, card, debitcard, or bank transfer)
  transactionModeId    Int                @map("transaction_mode_id")
  transactionMode      TransactionMode    @relation(fields: [transactionModeId], references: [id])
  // purpose of the transaction (home, food, shopping, fuel, entertainment)
  // home => maintenance, monthly flat maintenance, electricity
  transactionPurposeId Int                @map("transaction_purpose_id")
  transactionPurpouse  TransactionPurpose @relation(fields: [transactionPurposeId], references: [id])
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @default(now()) @updatedAt @map("updated_at")

  @@map("bank_transaction")
}

model Tracker {
  id           Int            @id @default(autoincrement())
  name         String
  objective    String
  description  String
  destination  String
  progress     String
  baseUnit     String // would indicate what's the unit for measure (water would have litres, smoke would be a unit)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  TrackerEntry TrackerEntry[]
  TrackingGoal TrackingGoal[]

  @@map("tracker")
}

// Would track the daily entries from the UI
model TrackerEntry {
  id            Int      @id @default(autoincrement())
  trackerId     Int      @map("tracking_id")
  tracker       Tracker  @relation(fields: [trackerId], references: [id])
  unit          Int
  entryDateTime DateTime
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("tracker_entry")
}

model TrackingGoal {
  id              Int             @id @default(autoincrement())
  trackerId       Int             @map("tracker_id")
  tracker         Tracker         @relation(fields: [trackerId], references: [id])
  recurringPeriod RecurringPeriod @map("recurring_period")
  // number of days * tracking unit => would be progress
  // (end date - start start) * tracking unit
  // for water the goal would be to consume 4 units
  targetUnit      Int             @map("target_unit")
  isActive        Boolean         @default(true) @map("is_active")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at")

  @@map("tracking_goal")
}

enum RecurringPeriod {
  DAILY
  WEEKLY
  MONTHLY
}
